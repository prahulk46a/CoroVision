import numpy as np
import cv2
from tkinter import *
from PIL import Image, ImageTk
from drive import go_forward, go_backwardward, go_left, go_right, camera_down, camera_up, go_stop, camera_left, camera_right

forward_pressed = False
reverse_pressed = False
left_pressed = False
right_pressed = False

def detect_corrosion(frame):
    hsv_frame = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)
    corr_lower = np.array([0, 70, 70], np.uint8)
    corr_upper = np.array([20, 200, 150], np.uint8)
    corr_mask = cv2.inRange(hsv_frame, corr_lower, corr_upper)
    kernel = np.ones((5, 5), np.uint8)
    corr_mask = cv2.dilate(corr_mask, kernel)
    contours, _ = cv2.findContours(corr_mask, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)
    
    for contour in contours:
        area = cv2.contourArea(contour)
        if area > 300:
            x, y, w, h = cv2.boundingRect(contour)
            frame = cv2.rectangle(frame, (x, y), (x + w, y + h), (0, 255, 0), 2)
            cv2.putText(frame, "Corrosion", (x, y - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.8, (0, 0, 255), 2)

    return frame

def live_detection():
    cap = cv2.VideoCapture(0)
    while True:
        ret, frame = cap.read()
        if not ret:
            break
        
        frame = detect_corrosion(frame)
        
        if forward_pressed:
            go_forward()
        elif reverse_pressed:
            go_backwardward()
        elif left_pressed:
            go_left()
        elif right_pressed:
            go_right()
        else:
            go_stop()
        
        frame = cv2.resize(frame, (400, 400))
        img = Image.fromarray(cv2.cvtColor(frame, cv2.COLOR_BGR2RGB))
        imgtk = ImageTk.PhotoImage(image=img)
        x.imgtk = imgtk
        x.configure(image=imgtk)
        x.update()

def forward():
    global forward_pressed
    forward_pressed = not forward_pressed
    if forward_pressed:
        print("Move forward:", forward_pressed)

def reverse():
    global reverse_pressed
    reverse_pressed = not reverse_pressed
    if reverse_pressed:
        print("Move reverse:", reverse_pressed)

def left():
    global left_pressed
    left_pressed = not left_pressed
    if left_pressed:
        print("Move left:", left_pressed)

def right():
    global right_pressed
    right_pressed = not right_pressed
    if right_pressed:
        print("Move right:", right_pressed)

def cam_up():
    camera_up()

def cam_down():
    camera_down()

def cam_left():
    camera_left()

def cam_right():
    camera_right()

def on_forward_press():
    forward()
    forward_button.config(relief=SUNKEN)

def on_forward_release():
    forward_button.config(relief=RAISED)

def on_reverse_press():
    reverse()
    reverse_button.config(relief=SUNKEN)

def on_reverse_release():
    reverse_button.config(relief=RAISED)

def on_left_press():
    left()
    left_button.config(relief=SUNKEN)

def on_left_release():
    left_button.config(relief=RAISED)

def on_right_press():
    right()
    right_button.config(relief=SUNKEN)

def on_right_release():
    right_button.config(relief=RAISED)

root = Tk()
root.geometry("1020x700")
root.title("Live Streaming")
root.resizable(0, 0)
im = None

MF = Frame(root, bd=8, bg="lightblue", relief=GROOVE)
MF.place(x=0, y=0, height=50, width=1020)

menu_label = Label(MF, text="Live Streaming", font=("times new roman", 20, "bold"), bg="lightgray", fg="black", pady=0)
menu_label.pack(side=TOP, fill="x")

x = Label(root, image=im)
x.grid(row=1, column=0, padx=5, pady=50)

# Create buttons for control
forward_button = Button(root, text="Forward", font=("times new roman", 20, "bold"), command=on_forward_press)
forward_button.grid(row=2, column=1, padx=5, pady=5)
forward_button.bind("<ButtonPress>", lambda event: on_forward_press())
forward_button.bind("<ButtonRelease>", lambda event: on_forward_release())

reverse_button = Button(root, text="Reverse", font=("times new roman", 20, "bold"), command=on_reverse_press)
reverse_button.grid(row=2, column=2, padx=5, pady=5)
reverse_button.bind("<ButtonPress>", lambda event: on_reverse_press())
reverse_button.bind("<ButtonRelease>", lambda event: on_reverse_release())

left_button = Button(root, text="Left", font=("times new roman", 20, "bold"), command=on_left_press)
left_button.grid(row=3, column=1, padx=5, pady=5)
left_button.bind("<ButtonPress>", lambda event: on_left_press())
left_button.bind("<ButtonRelease>", lambda event: on_left_release())

right_button = Button(root, text="Right", font=("times new roman", 20, "bold"), command=on_right_press)
right_button.grid(row=3, column=2, padx=5, pady=5)
right_button.bind("<ButtonPress>", lambda event: on_right_press())
right_button.bind("<ButtonRelease>", lambda event: on_right_release())

camup_button = Button(root, text="Cam_up", font=("times new roman", 20, "bold"), command=cam_up)
camup_button.grid(row=2, column=3, padx=5, pady=5)

camdown_button = Button(root, text="Cam_down", font=("times new roman", 20, "bold"), command=cam_down)
camdown_button.grid(row=3, column=3, padx=5, pady=5)

camera_left_button = Button(root, text="Cam_left", font=("times new roman", 20, "bold"), command=cam_left)
camera_left_button.grid(row=2, column=4, padx=5, pady=5)

camera_right_button = Button(root, text="Cam_right", font=("times new roman", 20, "bold"), command=cam_right)
camera_right_button.grid(row=3, column=4, padx=5, pady=5)

live_detection()

root.mainloop()
